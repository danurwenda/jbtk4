/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jbatik.imageeditor;

import com.jbatik.canvas.component.SceneRuler;
import com.jbatik.imageeditor.salinan.ColorController;
import com.jbatik.imageeditor.LibraryScene.MySavable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.UIManager;
import org.netbeans.api.annotations.common.StaticResource;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.UndoRedo;
import org.openide.loaders.DataObject;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.jbatik.modules.layout.library.editor//ImageLibEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ImageLibEditorTopComponent",
        iconBase = "com/jbatik/imageeditor/resources/image_editor.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
//@ActionID(category = "Window", id = "com.jbatik.modules.layout.library.editor.ImageLibEditorTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ImageLibEditorAction",
        preferredID = "ImageLibEditorTopComponent"
)
@Messages({
    "CTL_ImageLibEditorAction=ImageLibEditor",
    "CTL_ImageLibEditorTopComponent=ImageLibEditor Window",
    "HINT_ImageLibEditorTopComponent=This is a ImageLibEditor window"
})
public final class ImageLibEditorTopComponent extends TopComponent {

    private LibraryScene scene;
    private UndoRedo.Manager undomgr;

    public ImageLibEditorTopComponent() {
        initComponents();
        installLeftTools();
        installTopShortcut();
        installBottomTools();
        setName(Bundle.CTL_ImageLibEditorTopComponent());
        setToolTipText(Bundle.HINT_ImageLibEditorTopComponent());
        undomgr = new UndoRedo.Manager();
        undomgr.setLimit(10);
    }

    @Override
    public boolean canClose() {
        MySavable sav = getLookup().lookup(MySavable.class);
        if (sav == null) {
            return true;
        } else {
            Object retVal = DialogDisplayer.getDefault().notify(new NotifyDescriptor.Confirmation("Confirm rewrite?"));

            if (retVal == NotifyDescriptor.YES_OPTION) {
                //write to file
                try {
                    sav.save();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                } finally {
                    return true;
                }
            } else if (retVal == NotifyDescriptor.NO_OPTION) {
                sav.discard();
                return true;
            }
            return false;
        }
    }

    @Override
    public UndoRedo getUndoRedo() {
        return undomgr;
    }

    public UndoRedo.Manager getUndoManager() {
        return undomgr;
    }

    public void setEditedImage(DataObject file) throws FileNotFoundException, IOException {
        if (file != null && scene == null) {
            setName("Library Editor - " + file.getName());

            scene = new LibraryScene(file);
            final JComponent sceneView = scene.getView();
            JScrollPane scroller = new JScrollPane(sceneView);
            final SceneRuler horizontal = new SceneRuler(scene);
            final SceneRuler vertical = new SceneRuler(scene, SceneRuler.VERTICAL);
            scroller.setColumnHeaderView(horizontal);
            scroller.setRowHeaderView(vertical);
            add(scroller, BorderLayout.CENTER);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topToolbar = new TopToolBar();
        leftToolbar = new javax.swing.JToolBar();
        bottomToolbar = new javax.swing.JToolBar();

        setLayout(new java.awt.BorderLayout());

        topToolbar.setFloatable(false);
        topToolbar.setRollover(true);
        add(topToolbar, java.awt.BorderLayout.NORTH);

        leftToolbar.setFloatable(false);
        leftToolbar.setOrientation(javax.swing.SwingConstants.VERTICAL);
        leftToolbar.setRollover(true);
        add(leftToolbar, java.awt.BorderLayout.WEST);

        bottomToolbar.setFloatable(false);
        bottomToolbar.setRollover(true);
        add(bottomToolbar, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar bottomToolbar;
    private javax.swing.JToolBar leftToolbar;
    private TopToolBar topToolbar;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        if (scene != null) {
            scene.toPage();
        }
    }

    @Override
    protected void componentDeactivated() {
        ImageLibEditorRegistry.setActiveTC(null);
    }

    private boolean initialized = false;

    @Override
    protected void componentActivated() {
        scene.getView().requestFocusInWindow();
        ImageLibEditorRegistry.setActiveTC(this);
        init();
    }

    private void init() {
        if (initialized) {
            return;
        }
        //activate default tool
        AbstractButton firstTool = (AbstractButton) leftToolbar.getComponentAtIndex(0);
        firstTool.doClick();
        initialized = true;
    }

    @Override
    public Lookup getLookup() {
        return scene == null ? Lookup.EMPTY : scene.getLookup();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        scene = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private ButtonGroup toolGroup = new ButtonGroup();

    private void installLeftTools() {
        for (Action action : Utilities.actionsForPath("ImageLib/Tools")) {
            JToggleButton button = new JToggleButton(action);
            button.setText("");
            button.setFocusPainted(false);
            button.setToolTipText((String) action.getValue("displayName"));
            leftToolbar.add(button);
            toolGroup.add(button);
            if (!("Windows".equals(UIManager.getLookAndFeel().getID()) // NOI18N
                    && (button instanceof JToggleButton))) {
                button.setBorderPainted(false);
            }
        }
    }

    @StaticResource
    private static final String FLIP_HORIZONTAL_ICON_PATH = "com/jbatik/imageeditor/resources/mirrorx.png";
    private static final ImageIcon FLIP_HORIZONTAL_ICON = ImageUtilities.loadImageIcon(FLIP_HORIZONTAL_ICON_PATH, false);
    private static final String FLIP_HORIZONTAL_DISPLAY_NAME = "Flip Horizontal";
    @StaticResource
    private static final String FLIP_VERTICAL_ICON_PATH = "com/jbatik/imageeditor/resources/mirrory.png";
    private static final ImageIcon FLIP_VERTICAL_ICON = ImageUtilities.loadImageIcon(FLIP_VERTICAL_ICON_PATH, false);
    private static final String FLIP_VERTICAL_DISPLAY_NAME = "Flip Vertical";
    @StaticResource
    private static final String ROTATE90_CW_ICON_PATH = "com/jbatik/imageeditor/resources/belokkanan.png";
    private static final ImageIcon ROTATE90_CW_ICON = ImageUtilities.loadImageIcon(ROTATE90_CW_ICON_PATH, false);
    private static final String ROTATE90_CW_DISPLAY_NAME = "Rotate 90 clockwise";
    @StaticResource
    private static final String ROTATE90_CCW_ICON_PATH = "com/jbatik/imageeditor/resources/belokkiri.png";
    private static final ImageIcon ROTATE90_CCW_ICON = ImageUtilities.loadImageIcon(ROTATE90_CCW_ICON_PATH, false);
    private static final String ROTATE90_CCW_DISPLAY_NAME = "Rotate 90 counter-clockwise";

    private void installTopShortcut() {
        //some actions that's not a tool
        for (Action action : Utilities.actionsForPath("ImageLib/Actions")) {
            JButton b = topToolbar.add(action);
            b.setToolTipText((String) action.getValue("displayName"));
        }
        topToolbar.add(new JToolBar.Separator());
        //some shortcuts
        final JButton x_mirror = new JButton(FLIP_HORIZONTAL_ICON);
        x_mirror.setToolTipText(FLIP_HORIZONTAL_DISPLAY_NAME);
        final JButton y_mirror = new JButton(FLIP_VERTICAL_ICON);
        y_mirror.setToolTipText(FLIP_VERTICAL_DISPLAY_NAME);
        final JButton r90cw = new JButton(ROTATE90_CW_ICON);
        r90cw.setToolTipText(ROTATE90_CW_DISPLAY_NAME);
        final JButton r90ccw = new JButton(ROTATE90_CCW_ICON);
        r90ccw.setToolTipText(ROTATE90_CCW_DISPLAY_NAME);
        ActionListener al = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object source = e.getSource();
                ImageLibraryWidget w = scene.getImageWidget();

                if (source == x_mirror) {
                    w.doXFlip();
                } else if (source == y_mirror) {
                    w.doYFlip();
                } else if (source == r90ccw) {
                    w.setRotationAngle(w.getRotationAngle() - 90);
                } else if (source == r90cw) {
                    w.setRotationAngle(w.getRotationAngle() + 90);
                }
                w.repaint();
                scene.validate();
                scene.addSavable();
            }

        };
        for (JButton b : Arrays.asList(x_mirror, y_mirror, r90ccw, r90cw)) {
            b.addActionListener(al);
            topToolbar.add(b);
        }
    }

    private final ColorController COLOR_CONTROLLER = ColorController.create();

    public ColorController getColorController() {
        return COLOR_CONTROLLER;
    }

    private void installBottomTools() {
        bottomToolbar.add(COLOR_CONTROLLER.getComponent());
    }

    public LibraryScene getScene() {
        return scene;
    }

    public void setToolToolbar(JToolBar toolbar) {
        topToolbar.setToolToolbar(toolbar);
    }

}
