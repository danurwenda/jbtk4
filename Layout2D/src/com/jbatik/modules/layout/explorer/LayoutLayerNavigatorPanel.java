/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jbatik.modules.layout.explorer;

import com.jbatik.core.api.GlobalUndoManager;
import java.awt.BorderLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.JComponent;
import org.netbeans.spi.navigator.NavigatorPanel;
import org.netbeans.spi.navigator.NavigatorPanelWithUndo;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 *
 * @author RAPID02
 */
@NavigatorPanel.Registration(position = 0, mimeType = "text/lay+xml", displayName = "Layout Layer")
public class LayoutLayerNavigatorPanel extends javax.swing.JPanel implements NavigatorPanelWithUndo, LookupListener {

    /**
     * Creates new form Nav
     */
    public LayoutLayerNavigatorPanel() {
        initComponents();

        toolbar.add(Box.createHorizontalGlue());
        for (Action a : Utilities.actionsForPath("LayoutLayer/Action")) {
            toolbar.add(a);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        contentPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        toolbar.setFloatable(false);
        toolbar.setRollover(true);
        add(toolbar, java.awt.BorderLayout.SOUTH);

        contentPanel.setLayout(new java.awt.BorderLayout());
        add(contentPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getDisplayName() {
        return "Layout Layer";
    }

    @Override
    public String getDisplayHint() {
        return "Layers structure of currently displayed layout";
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void panelActivated(Lookup context) {
//        context = Utilities.actionsGlobalContext();
        layerControllerInLookup = context.lookupResult(LayerController.class);
        layerControllerInLookup.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void panelDeactivated() {
        layerControllerInLookup.removeLookupListener(this);
    }

    @Override
    public Lookup getLookup() {
        if (currentPanel == null) {
            return Lookup.EMPTY;
        } else {
            return currentPanel.getLookup();
        }
    }

    private Lookup.Result<LayerController> layerControllerInLookup;

    @Override
    public void resultChanged(LookupEvent ev) {
        if (!layerControllerInLookup.allInstances().isEmpty()) {
            LayerController s = layerControllerInLookup.allInstances().iterator().next();
            if (s != null) {
                setLayerController(s);
            }
        }
        //when TC switches focus from navigator to editor, there's a moment
        //where this resultChanged is invoked with no layerController in Lookup
        //this will result a strange loop
//        else {
//            contentPanel.removeAll();
//            contentPanel.revalidate();
//            repaint();
//        }
    }
    private static Map<LayerController, LayerPanel> uiCache = new HashMap<>();
    private LayerPanel currentPanel;

    private void setLayerController(LayerController pc) {
        if (pc == null) {
            return;
        }
        LayerPanel candidate = uiCache.get(pc);
        if (candidate == null) {
            candidate = new LayerPanel(pc);
            uiCache.put(pc, candidate);
        }
        currentPanel = candidate;
        contentPanel.removeAll();
        contentPanel.add(currentPanel, BorderLayout.CENTER);
        contentPanel.revalidate();
        //always call revalidate after remove-add combo
        //http://docs.oracle.com/javase/7/docs/api/java/awt/Container.html#removeAll()
    }

    @Override
    public UndoRedo getUndoRedo() {
        return GlobalUndoManager.getManager();
    }
}
