/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jbatik.modules.corak.newfile;

import com.jbatik.modules.corak.node.CorakFileUtil;
import java.awt.Component;
import java.io.File;
import java.util.ResourceBundle;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;

public final class NewCorakVisualPanel1 extends JPanel {

    private Project project;
    private NewCorakWizardPanel1 panel;
    private final ChangeSupport changeSupport = new ChangeSupport(this);
    protected ResourceBundle bundle = NbBundle.getBundle(NewCorakVisualPanel1.class);

    /**
     * Creates new form CorakVisualPanel1
     */
    public NewCorakVisualPanel1(NewCorakWizardPanel1 panel) {
        this.project = panel.getProject();
        initComponents();
        this.panel = panel;
        nameTF.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                fireChange();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                fireChange();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                fireChange();
            }

            private void fireChange() {
                createdFilesTA.setText(
                        getNewCorakName().length() > 0
                        ? getNewCorakPath()
                        : ""
                );
                changeSupport.fireChange();
            }
        });
        changeSupport.addChangeListener(panel);
    }

    @Override
    public String getName() {
        return "New Corak File";
    }

    public String getNewCorakPath() {
        return FileUtil.toFile(CorakFileUtil.getCoraksFolder(project, false)).getPath()
                + File.separatorChar + getNewCorakName() + ".cor";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectLabel = new javax.swing.JLabel();
        projectTF = new JTextField(ProjectUtils.getInformation(project).getDisplayName());
        createdFilesLabel = new javax.swing.JLabel();
        createdFilesTA = new javax.swing.JTextArea();
        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(projectLabel, org.openide.util.NbBundle.getMessage(NewCorakVisualPanel1.class, "NewCorakVisualPanel1.projectLabel.text")); // NOI18N

        projectTF.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(createdFilesLabel, org.openide.util.NbBundle.getMessage(NewCorakVisualPanel1.class, "NewCorakVisualPanel1.createdFilesLabel.text")); // NOI18N

        createdFilesTA.setEditable(false);
        createdFilesTA.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        createdFilesTA.setColumns(20);
        createdFilesTA.setRows(5);
        createdFilesTA.setBorder(null);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(NewCorakVisualPanel1.class, "NewCorakVisualPanel1.nameLabel.text")); // NOI18N

        nameTF.setText(org.openide.util.NbBundle.getMessage(NewCorakVisualPanel1.class, "NewCorakVisualPanel1.nameTF.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createdFilesLabel)
                        .addGap(7, 7, 7)
                        .addComponent(createdFilesTA, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectTF)
                            .addComponent(nameTF))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFilesLabel)
                    .addComponent(createdFilesTA, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel createdFilesLabel;
    private javax.swing.JTextArea createdFilesTA;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JTextField projectTF;
    // End of variables declaration//GEN-END:variables

    String getNewCorakName() {
        return nameTF.getText();
    }

    public int showAsDialog(Component parentComponent) {
        nameTF.setText("");

        boolean close = false;
        int choice = JOptionPane.CANCEL_OPTION;

        while (!close) {
            choice = JOptionPane.showConfirmDialog(parentComponent, this, bundle.getString("NewCorakVisualPanel1.title"),
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (choice == JOptionPane.OK_OPTION) {
                if (nameTF.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(new JFrame(), bundle.getString("NewCorakVisualPanel1.error"), "ERROR", JOptionPane.ERROR_MESSAGE);
                    close = false;
                } else {
                    close = true;
                }
            } else {
                close = true;
            }
        }
        return choice;
    }

    boolean valid(WizardDescriptor wiz) {
        if (getNewCorakName().length() < 1) {
            return false;
        } else {
            File f = new File(getNewCorakPath());
            if (f.exists()) {
                wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                        "The file " + f.getPath() + " is already exist.");
                return false;
            } else {
                wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,null);
                return true;
            }
        }
    }

}
